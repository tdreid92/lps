"use strict";
var AWS = require("aws-sdk");
const dDb = new AWS.DynamoDB();
const docClient = new AWS.DynamoDB.DocumentClient();
const TRANSLATIONS_TABLE = "Translations";
const DEFINITIONS_TABLE = "Definitions";
const buildPutRequests = (items) => {
    const putRequests = items.map((it) => ({
        PutRequest: {
            Item: AWS.DynamoDB.Converter.marshall(it),
        },
    }));
    console.log("hi");
    return putRequests;
};
const getItem = async (tableName, key) => {
    const params = {
        TableName: tableName,
        Key: {
            translationKey: key,
        },
    };
    console.log("Commence read of TranslationKey: ", key);
    return await docClient.get(params).promise();
};
const batchGetItem = async (tableName, keys) => {
    const params = {
        RequestItems: {
            [tableName]: {
                Keys: await keys.map((key) => ({
                    definitionKey: {
                        S: key,
                    },
                })),
            },
        },
    };
    console.log(JSON.stringify(params));
    return await dDb.batchGetItem(params).promise();
};
const resolveTranslations = async (translationKey, reversedTranslationKey) => {
    const translations = await Promise.all([
        getItem(TRANSLATIONS_TABLE, translationKey),
        getItem(TRANSLATIONS_TABLE, reversedTranslationKey),
    ]);
    return isEmpty(translations[0]) ? translations[1] : translations[0];
};
exports.handler = async (event) => {
    console.log(event);
    const translation = await resolveTranslations(event.translationKey, event.reversedTranslationKey);
    if (isEmpty(translation)) {
        return {
            StatusCode: 204,
            Msg: "No content found",
            Payload: {},
        };
    }
    const definitions = await batchGetItem(DEFINITIONS_TABLE, translation.Item.definitionKeys);
    return {
        StatusCode: 200,
        Payload: definitions.Responses.Definitions.map((d) => AWS.DynamoDB.Converter.unmarshall(d)).sort((a, b) => a.index - b.index),
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTdCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBRS9CLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUVwRCxNQUFNLGtCQUFrQixHQUFHLGNBQWMsQ0FBQztBQUMxQyxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQztBQUV4QyxNQUFNLGdCQUFnQixHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDeEMsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyQyxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztTQUMxQztLQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsU0FBaUIsRUFBRSxHQUFXLEVBQUUsRUFBRTtJQUN2RCxNQUFNLE1BQU0sR0FBRztRQUNiLFNBQVMsRUFBRSxTQUFTO1FBQ3BCLEdBQUcsRUFBRTtZQUNILGNBQWMsRUFBRSxHQUFHO1NBQ3BCO0tBQ0YsQ0FBQztJQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEQsT0FBTyxNQUFNLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDL0MsQ0FBQyxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsSUFBVyxFQUFFLEVBQUU7SUFDNUQsTUFBTSxNQUFNLEdBQUc7UUFDYixZQUFZLEVBQUU7WUFDWixDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNYLElBQUksRUFBRSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ2xDLGFBQWEsRUFBRTt3QkFDYixDQUFDLEVBQUUsR0FBRztxQkFDUDtpQkFDRixDQUFDLENBQUM7YUFDSjtTQUNGO0tBQ0YsQ0FBQztJQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sTUFBTSxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2xELENBQUMsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxFQUFFLGNBQW1CLEVBQUUsc0JBQTJCLEVBQUUsRUFBRTtJQUNyRixNQUFNLFlBQVksR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDckMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLGNBQWMsQ0FBQztRQUMzQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsc0JBQXNCLENBQUM7S0FDcEQsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RFLENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQTRELEVBQUUsRUFBRTtJQUN2RixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRW5CLE1BQU0sV0FBVyxHQUFHLE1BQU0sbUJBQW1CLENBQzNDLEtBQUssQ0FBQyxjQUFjLEVBQ3BCLEtBQUssQ0FBQyxzQkFBc0IsQ0FDN0IsQ0FBQztJQUNGLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQ3hCLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLEdBQUcsRUFBRSxrQkFBa0I7WUFDdkIsT0FBTyxFQUFFLEVBQUU7U0FDWixDQUFDO0tBQ0g7SUFFRCxNQUFNLFdBQVcsR0FBRyxNQUFNLFlBQVksQ0FDcEMsaUJBQWlCLEVBQ2pCLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUNoQyxDQUFDO0lBQ0YsT0FBTztRQUNMLFVBQVUsRUFBRSxHQUFHO1FBQ2YsT0FBTyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQ3hELEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDckMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFxQixFQUFFLENBQXFCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztLQUM1RSxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=